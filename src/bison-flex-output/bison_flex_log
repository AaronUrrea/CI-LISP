LEX: LPAREN "("
LEX: FUNC "print"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "print"
LEX: INT "1"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "print"
LEX: INT "1"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "2"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "add"
LEX: INT "1"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: LPAREN "("
LEX: FUNC "print"
LEX: INT "2"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "rand"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "rand"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "rand"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "rand"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "rand"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "rand"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "rand"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "rand"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "rand"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "rand"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "read"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "read"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "read"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "read"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "add"
LEX: LPAREN "("
LEX: FUNC "read"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: LPAREN "("
LEX: FUNC "read"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "equal"
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "equal"
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: FLOAT "0.0"
BISON: number ::= FLOAT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "equal"
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: FLOAT "0.0001"
BISON: number ::= FLOAT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "less"
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "less"
LEX: INT "-1"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "less"
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: FLOAT "-0.00001"
BISON: number ::= FLOAT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "greater"
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "1"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "greater"
LEX: INT "1"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: FUNC "greater"
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: FLOAT "0.0"
BISON: number ::= FLOAT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: LPAREN "("
LEX: LET "let"
LEX: LPAREN "("
LEX: SYMBOL "x"
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: let_elem ::= LPAREN SYMBOL s_expr RPAREN 
LEX: LPAREN "("
LEX: SYMBOL "y"
LEX: INT "1"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: let_elem ::= LPAREN SYMBOL s_expr RPAREN 
LEX: RPAREN ")"
BISON: let_list ::= let_elem 
BISON: let_list ::= let_elem 
BISON: let_section ::= LPAREN let let_list RPAREN 
LEX: LPAREN "("
LEX: FUNC "less"
LEX: SYMBOL "x"
BISON: s_expr ::= SYMBOL 
LEX: SYMBOL "y"
BISON: s_expr ::= SYMBOL 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr ::= LPAREN let_section s_expr RPAREN 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: COND "cond"
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "5"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "6"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr ::= LPAREN cond s_expr s_expr s_expr RPAREN 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: COND "cond"
LEX: INT "1"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "5"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "6"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr ::= LPAREN cond s_expr s_expr s_expr RPAREN 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: COND "cond"
LEX: LPAREN "("
LEX: FUNC "less"
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "1"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: INT "5"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "6"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr ::= LPAREN cond s_expr s_expr s_expr RPAREN 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: COND "cond"
LEX: LPAREN "("
LEX: FUNC "less"
LEX: INT "1"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "0"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: INT "5"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: INT "6"
BISON: number ::= INT 
BISON: s_expr ::= NUMBER 
LEX: RPAREN ")"
BISON: s_expr ::= LPAREN cond s_expr s_expr s_expr RPAREN 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: LPAREN "("
LEX: LET "let"
LEX: LPAREN "("
LEX: SYMBOL "x"
LEX: LPAREN "("
LEX: FUNC "read"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: let_elem ::= LPAREN SYMBOL s_expr RPAREN 
LEX: LPAREN "("
LEX: SYMBOL "y"
LEX: LPAREN "("
LEX: FUNC "read"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: let_elem ::= LPAREN SYMBOL s_expr RPAREN 
LEX: RPAREN ")"
BISON: let_list ::= let_elem 
BISON: let_list ::= let_elem 
BISON: let_section ::= LPAREN let let_list RPAREN 
LEX: LPAREN "("
LEX: FUNC "add"
LEX: LPAREN "("
LEX: FUNC "print"
LEX: SYMBOL "x"
BISON: s_expr ::= SYMBOL 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: LPAREN "("
LEX: FUNC "print"
LEX: SYMBOL "x"
BISON: s_expr ::= SYMBOL 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: LPAREN "("
LEX: FUNC "print"
LEX: SYMBOL "y"
BISON: s_expr ::= SYMBOL 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: LPAREN "("
LEX: FUNC "print"
LEX: SYMBOL "y"
BISON: s_expr ::= SYMBOL 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr ::= LPAREN let_section s_expr RPAREN 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: LPAREN "("
LEX: LET "let"
LEX: LPAREN "("
LEX: SYMBOL "x"
LEX: LPAREN "("
LEX: FUNC "rand"
LEX: RPAREN ")"
BISON: s_expr_section ::= NULL 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: let_elem ::= LPAREN SYMBOL s_expr RPAREN 
LEX: RPAREN ")"
BISON: let_list ::= let_elem 
BISON: let_section ::= LPAREN let let_list RPAREN 
LEX: LPAREN "("
LEX: FUNC "add"
LEX: LPAREN "("
LEX: FUNC "print"
LEX: SYMBOL "x"
BISON: s_expr ::= SYMBOL 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: LPAREN "("
LEX: FUNC "print"
LEX: SYMBOL "x"
BISON: s_expr ::= SYMBOL 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr ::= LPAREN let_section s_expr RPAREN 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: QUIT "quit"
BISON: s_expr ::= QUIT 
